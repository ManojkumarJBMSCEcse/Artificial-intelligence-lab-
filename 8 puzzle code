class Node:
    def _init_(self, state, parent=None, move=0, depth=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = 0
    
    def _lt_(self, other):
        return self.cost < other.cost

def calculate_manhattan(state, goal):
    total_distance = 0
    for i in range(1, 9):
        current_idx = state.index(i)
        goal_idx = goal.index(i)
        total_distance += abs(current_idx // 3 - goal_idx // 3) + abs(current_idx % 3 - goal_idx % 3)
    return total_distance

def reconstruct_path(node):
    path = []
    while node:
        path.append(node.state)
        node = node.parent
    return path[::-1]

def generate_moves(state):
    moves = []
    zero_idx = state.index(0)
    x, y = divmod(zero_idx, 3)
    
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    for dx, dy in directions:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_idx = new_x * 3 + new_y
            new_state = list(state)
            new_state[zero_idx], new_state[new_idx] = new_state[new_idx], new_state[zero_idx]
            moves.append(tuple(new_state))
    
    return moves

def a_star_search(start, goal):
    open_list = []
    closed_set = set()

    start_node = Node(start)
    start_node.cost = calculate_manhattan(start, goal)
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        
        if current_node.state == goal:
            return reconstruct_path(current_node)
        
        closed_set.add(current_node.state)
        
        for neighbor in generate_moves(current_node.state):
            if neighbor in closed_set:
                continue
            
            neighbor_node = Node(neighbor, parent=current_node, depth=current_node.depth + 1)
            neighbor_node.cost = neighbor_node.depth + calculate_manhattan(neighbor, goal)
            
            heapq.heappush(open_list, neighbor_node)
    
    return None

start_state = (1, 2, 3,
               4, 0, 5,
               6, 7, 8)

goal_state = (1, 2, 3,
              4, 5, 6,
              7, 8, 0)

solution_path = a_star_search(start_state, goal_state)

if solution_path:
    print("Solution found with steps:")
    for step in solution_path:
        print(step[:3])
        print(step[3:6])
        print(step[6:])
        print()
else:
    print("No solution found.")
